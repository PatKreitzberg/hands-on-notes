

# Rules
When writing code try and stick to the following parameters:
1. Be very object oriented and use inheritence when it helps keep things organized and classes short and purposeful
2. Keep classes to 150 lines or less (don't count comment lines)
3. When writing a new function add a comment to the top describing the purpose of the function
4. If you created a new file, change a file significantly, or it is missing from Project.md then create an entry in Project.md describing the purpose of the file, the major functions, important variables, and how it ineracts with other files.
5. After I give instructions to complete a task ask any clarifying questions, wait for the answers, then consider the answers and only then implement.
6. If you figured out anything that may be helpful for you in the futre inclulde it in claude_hints.md
7. The canvas starts at (0,0) in the top left corner. Moving right and downward both increase the x-coordinate and y-coordinate.
8. When a major feature is implemented and the application compiles, always prompt the user if they want to refactor.
9. When any dialog is shown in the drawing/editor view, disable stylus drawing to allow the stylus to interact with the dialog.
10. When doing a refactor, automatically include a lot of logging for easier debugging of the refactor.
   Implementation:
   - Use EditorState.isAnyDialogOpen SharedFlow to communicate dialog state
   - In the activity/composable showing the dialog, use LaunchedEffect to emit the dialog state:
     ```kotlin
     LaunchedEffect(showDialog) {
         EditorState.isAnyDialogOpen.emit(showDialog)
     }W
     ```
   - BaseDrawingActivity automatically observes this state and calls disableDrawing()/enableDrawing()
   - This prevents accidental drawing on the canvas while interacting with dialogs
11. Toolbar buttons and UI elements can be selected with both finger touches and stylus.
   Implementation:
   - EditorState.getCurrentExclusionRects() defines areas where drawing is excluded (like the toolbar)
   - BaseDrawingActivity.dispatchTouchEvent() checks if touches are in exclusion areas
   - Touches in exclusion areas are passed directly to the UI, bypassing the Onyx SDK
   - This allows finger touches on toolbar buttons even when raw drawing is disabled for the canvas
12. Checklist for writing new code:
   - [ ] Classes under 150 lines
   - [ ] Single responsibility per class
   - [ ] Constructor dependency injection
   - [ ] Clear, descriptive naming
   - [ ] Unidirectional data flow
   - [ ] Explicit error handling
   - [ ] No circular dependencies
   - [ ] Testable design
   - [ ] Proper documentation
   - [ ] Feature-based organization
13. Follow the architecture plan in ~/AndroidStudioProjects/CURRENT/hands-on-jul16/architecture-plan.md       If adding a new feature that is not in architecture-plan.md ask me and we will figure out where to put it.
14. After making major changes (such as implementing a new feature) run the commands "git add \*.kt \*.java"  followed by a "git commit -am " with a commit message that describes the changes. Then make sure the code compiles. If you had to make changes to make the code compile then also do a git commit -am whose message just says that "it now compiles after the latest changes <description of changes>"


ULTRATHINK MODE
Think HARD and activate ULTRATHINK for this task:
1. ULTRATHINK Clarification -- is there anything Claude needs to ask the human?
2. ULTRATHINK Analysis -- what's really required?
3. ULTRATHINK Planning -- break it down into clear steps
4. ULTRATHINK Execution -- follow each step with precision
5. ULTRATHINK Review -- is this the best solution Think hard before doing anything. Structure everything. Max quality only. ULTRATHINK MODE

ALWAYS BE IN ULTRATHINK MODE 